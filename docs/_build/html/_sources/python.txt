.. _python:


******
Python
******
Python претставува скриптен динамички програмски јазик со  високо ниво на 
податочна структура и едноставна синтакса.  Сето тоа овој јазик го прави 
идеален за брзо развивање на апликации во многу области.
Во понатамошната презенација на овој програмски јазик користиме 2.7 верзија.

Променливи
----------
Како вовед ќе демонстрираме неколку едноставни примери со python.
Да се обидеме за почеток од командна линија да извршиме доделување на вредност 
на променлива и испишување на истата.

За разлика од некои други програмски јазици каде што мора претходно
да го дефинираме типот на променлива во овој случај ја доделуваме
вредноста на променливата додека самиот јазик детектира од каков тип е истата
врз основа на вредноста што му е доделена.::
   
   >>> a = 'My first pythonic code'
   >>> print a 
   My first pythonic code
   >>> type(a) 
   <type 'str'>

Во горниов пример на променливата ``a`` и доделивме ``string`` вредност без притоа да
го дефинираме типот на променлива. Потоа при проверка на типот на променливата 
како резултат добивме дека променливата ``а`` поради вредноста што ја имаше добиено 
беше детектирана од тип ``str``.
Во продолжение следува уште еден пример овој пат со ``int`` вредност.::
   
   >>> b = 25 
   >>> type(b) 
   <type 'int'>
 
Податочни типови кои што доста често се користат во python се: 
``list``, ``dict`` и ``tuple``::
 
   >>> l = [1, 2, 3] 
   >>> l 
   [1, 2, 3] 
   >>> d = {'first': 1, 'second': 2} 
   >>> d 
   {'second': 2, 'first': 1}

За истите поопширно може да прочитате на следниов 
`линк <http://docs.python.org/2/tutorial/datastructures.html>`_

Операции со променливи
----------------------
Овој програмски јазик овозможува најразлични операции во зависност
од типот на променливата. Така на пример две ``str`` променливи што содржат засебни
реченици можат многу лесно да се спојат во една реченица.::
 
   >>> a = 'My first pythonic code. ' 
   >>> c = 'Wow it realy simple but powerful'
   >>> ac = a + c 
   >>> ac 
   'My first pythonic code. Wow it realy simple but powerful'

Доколку сакаме  `Wow` од вториот збор сепак да го нема во финалната реченица истот 
би го направиле на следниот начин::
 
   >>> ac = a + c[4:] 
   >>> ac 
   'My first pythonic code. it realy simple but powerful'

Но реченицата како што изгледа во моментов не е во ред потребно е точката 
да ја замениме со запирка.
Постојат повеќе начини да го направиме тоа следува еден од нив.::
 
   >>> ac = a[:-2] + ', ' + c[4:] 
   >>> ac 
   'My first pythonic code, it realy simple but powerful'  

Исто така сите основни операции со броеви се возможни во python
во наредниот пример се демонстрирани истите.::
 
   >>> i = 5 
   >>> j = 3 
   >>> i + j 
   8 
   >>> i - j 
   2 
   >>> i * j 
   15 
   >>> i/j 
   1 
   >>> i < j 
   False 
   >>> i > j 
   True
 
 
Повторувачки циклус и Услови
----------------------------

Многу често при програмирање потребно е да се извршат одредени услови за решавање 
на некој проблем, во python се користат следниве услови ``if  else`` или 
``if elif else``

Така доколку потребно е вредноста на ``ac``  да ја испишаме само ако 
``i``  е помало од ``j`` во код би изгледало вака::

   >>> if i > j: 
   ...     print ac

Доколку пак имаме за задача од листа на броеви да ги испечатиме 
сите што се помали од 10,  потребно е да поминеме преку секој елемент
од листата и да го споредиме со 10. 
За ова да го направиме потребно е да искористиме ``for`` циклус::

   >>> lst = [1, 5, 10, 15, 20, 25] 
   >>> for l in lst: 
   ...     if l > 10: 
   ...         print l 
   ... 
   15 
   20 
   25
 
Во зависност од потребите што ги имаме исто така може да го користиме и 
``While`` циклисот или комбинација од циклус и услов како што беше случајот 
во претходниот пример.

Функции
-------
Функциите претставуваат целина од код која што извршува одредена задача. 
Секоја програма е составена од поголем број на функции. 
Python содржи доста предефинирани функции кои што може да ги користиме 
со нивно повикување. Така на пример доколку е потребно буквите во една 
реченица да ги направиме големи тоа се прави со повикување на 
функцијата upper::
   
   >>> ac.upper() 
   'MY FIRST PYTHONIC CODE, IT REALY SIMPLE BUT POWERFUL'
   
Освен предефинирани функции, исто така може и ние да креираме функција 
според нашите потреби што после тоа ќе ја користиме во апликацијата. 
Впрочем на тој начин најдобро и би го организирале кодот и не би имале потреба да пишуваме 
идентичен код на повеќе места туку само со повикување на соодветната функција 
истиот би се извршил. Во примерот што следува ќе дефинираме функција што пресметува два броја 
и како повратна информација го враќа нивниот резултат::
   
   >>> def func(a, b): 
   ...     return a + b 
   
   >>> func(a=10, b=20) 
   30

Дефинирањето на функција во python изгледа како на горниот пример односно 
пред секоја функција потребно е да стои предефинираниот збор ``def`` и во 
продолжение името на функцијата веднаш до него во мали загради влезните параметри. 
Влезните параметри може да бидат задолжителни 
(оние без кои не може да се повика функцијата) или незадолжителни 
односно параметри со предефинирана вредност која што вредност ќе ја земат 
доколку не се проследат при повикување на функцијата. На пример::
   
   >>> def func(a, b=5): 
   ...     return a + b 
   ... 
   >>> func(a=10)
   15
 
 
Класи и Објекти
---------------
Движејќи се напред низ ова кратко резиме за python доаѓаме еден чекор понапред 
во организациската поставеност на python програма, а тоа се објектите односно класи. 
Ако функцијата наједноставно ја дефиниравме како целина на код 
која што има за цел да изврши конкретна задача овдека на сличен начин 
ќе ги дефинираме објектите како група од функции и променливи кои што 
треба да претстават одредена целина во апликацијата 
односно со нивна помош да може соодветниот објект да ги опише неговите 
специфични карактеристики и активности. За да го појасниме претходно иснесеното ќе 
дадеме соодветен пример за класа која што ги опипува основните карактеристики на човекот. 
За секој човек се заеднички следниве карактеристики:
 
 * Име
 * Презиме
 * Датум на раѓањe
 
Ова во python би изгледало вака::
   
   >>> class Person:
         def __init__(self, first_name, last_name, birthday): 
            self.first_name=first_name 
            self.last_name=last_name 
            self.birthday=birthday 
         def my_info(self): 
            return 'Name: ' + self.first_name + ' ' + self.last_name + ' Birthday:  ' + self.birthday 
 
Секој објек се дефинира со резервниот збор ``class`` и по него следи името на класата. 
``__init__()`` Претставува конструктор на класата. 
При креирање на инстанца од класата  влезните аргументи доделени на класата 
овој метод ги проследува до соодветните променливи во класата::
  
   >>> test_person = Person(first_name='Test', last_name='Person', birthday='12.08.2000')
  
``self`` претставува покажувач кон самиот себе. Во последниот дел од класата
е дефиниран метод кои што враќа информации за одреден ``Person`` објект.  
Овој метод за секоја информација да ја земе од променливите на објектот 
пристапува до нив преку self.

Така ако сакаме информација за веќе креираната инстанца од Person моделот 
го повикуваме методот my_info::
   
   >>> test_person.my_info() 
   'Name: Test Person Birthday: 12.08.2000'

Модули
------
Модулите во python претставуваат фајлови со .py  екстензија кои содржат 
Класи или Функции. Секој модул може да се додаде во друг со резервниот збор 
``import`` и името на модулот. После додавањето на модулот функциите и класите 
од истиот може да се користат во тековниот модул. 
На пример доколку сакаме да го користиме методот ``findall``  од ``re``  
модулот го пишуваме следниов код::
   
   >>> import re 
   >>> re.findall (a, b)
   
при што се повикува методот со соодветните влезни променливи за истиот.

Ова е само мал дел од тоа што се нуди овој програмски јазик за 
подетално совладување на овој програмски јазик следуваат во продолжение неколку линкови.
   
   * `<http://docs.python.org/2/tutorial/>`_
   * `<http://www.tutorialspoint.com/python/>`_
   * `<http://sthurlow.com/python/>`_

Една од најдобрите книги за python е 'Dive Into Python' во истата целава проблематика 
многу добро е објаснета. 
Истата е бесплатна и можете да се симне на `линкот <http://www.diveintopython.net/index.html>`_