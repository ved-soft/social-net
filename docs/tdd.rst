.. _tdd:

*****************************
Test Driven Development (TDD)
*****************************
TDD  претставува процес на пишување тестови за секоја целина на код. 
Редоследот на тестови и пишување код е во насока да прво се пишуваат тестовите 
за после тоа врз основа на нив да се напише соодветниот код.  
На почетокот тестот е  неуспешен, што и самите би го очекувале за подоцна 
откако ќе се напише потребниот код тестот да биде успешен. 
Тестовите можат да бидат позитивни односно негативни, 
што би значело соодветната акција во тестот не секогаш дава позитивен резултат. 
Препорачано е сите случаи каде што се очекува кодот да  појави 
одредена грешка да се проверат. На тој начин ќе бидеме сигурни дека условот 
што го имаме е вистинскиот.

Овој процес на пишвање тестови размислувајќи краткорочно би рекле 
дека е губење време, бидејќи во најголем број случаи бројот на линии код за 
тестови е три пати поголем од останатиот код. Но долгорочно гледано овој процес 
е многу важен за една апликација особено доколку истата е пообемна. 
За многу кратко време може да се провери дали апликацијата функционира како што треба, 
доколку НЕ многу полесно може да се лоцира проблемот. 
Во понатамошното надоградување на една апликација и промените кои би се направиле 
во одреден дел од истата со помош на тестовите можеме да се осигураме 
дека не направиле дополнителни проблеми во друг дел од апликацијата. 
TDD ни овозможува  значително подобрување на кавалитетот на код кои што го пишуваме. 
Во продолжение преку пример ќе го објасниме пишувањето на тестови во python.
Од верзија 2.1 python содржи модул за  ``unit`` тестови под името ``unittest``::

   import unittest


   def Calc(a, b):
       if a < b:
           raise Exception("a have to be grater then b")
       return a + b
   
   
   class TestCalculation(unittest.TestCase):
   
       def test_equal_to_ten_faild(self):
           a = 10
           b = 5
           self.assertFalse(Calc(a, b) == 10)
   
       def test_equal_to_ten(self):
           a = 6
           b = 4
           self.assertEqual(Calc(a, b), 10)
   
       def test_a_not_greater_then_b(self):
           a = 4
           b = 6
   
           self.assertRaises(Exception, Calc, a, b)
   
   
   def main():
       unittest.main()
   
   if __name__ == '__main__':
       main()
 
Во конкретиниот пример се проверува дали пресметките што ги прави функцијата 
``Calc`` се точни. Најпрвин креираме класа ``TestCalculation`` која што 
наследува од ``unittest.TestCase`` класата, сите методи во оваа класа 
што започнуваат со ``test`` и како влезен параметар го имаат ``self`` python ги 
прогласува за тестови.  Пред да ја имплементираме функцијата ``Calc`` имаме информација 
дека истата потребано е да пресметува два броја при што првиот не смее да биде поголем 
од вториот. За сето ова да го покриеме  со тестови пишуваме тест кои  што 
очекуваме дека ``Calc`` нема да пресмета дека 10 и 5 се 10. 
Потоа нареден тест дека 6 и 4 Навистина се 10 и последниот дека ако 
првата променлива е поголема од втората ќе јави грешка. 
Сите овие тестови ако вака ги извршиме потребно е да добиеме 
два неуспешни тестови::
   
   ---------------------------------------------------------------------- 
   Ran 3 tests in 0.000s 

   FAILED (failures=2)

Првиот тест ќе биде успешен затоа што и ``None`` вредноста што ја враќа ``Calc`` 
функцијата е различно од 10. После имплементацијата на функцијата доколку истата 
е имплементирана правилно сите три тест мора да бидат успешни::
   
   ---------------------------------------------------------------------- 
   Ran 3 tests in 0.000s 

   OK
   
TDD процесот е многу вашен при развивање на софтвер и потребно е да му се обрне 
многу големо внимание. Ова беше само еден пример за да се добие идеа за 
овој процес, за подетално запознавање со истиот во продолжение предлагам да 
се прочитатаат  поглавје 13 и 14 од  'Dive into Python'. 
Исто така python има одлична документација во продолжение следи 
`линк <http://docs.python.org/2/library/unittest.html#module-unittest>`_ од овој модул.
